
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author nicho
 */
public class EditingPage extends javax.swing.JPanel {

    /**
     * Il file del salvataggio dei punti di taglio del progetto corrente.
     */
    private File currentFile = null;

    /**
     * Il triangolo da ritagliare.
     */
    private Triangle triangle;

    /**
     * Lista dei punti di taglio.
     */
    private ArrayList<Point> dots = new ArrayList<Point>();

    /**
     * Il Raggio dei punti di taglio.
     */
    private int RADIUS = 10;

    /**
     * Il poligono formato con i punti di taglio.
     */
    private Polygon cutPoly = new Polygon();

    /**
     * Determina se bisogna generare o meno il poligono.
     */
    private boolean fillPoly = false;

    /**
     * Determina se bisogna disegnare o meno i punti di taglio.
     */
    private boolean drawDots = true;

    /**
     * La larghezza della pagina.
     */
    private int width;

    /**
     * L'altezza della pagina
     */
    private int height;

    /**
     * Determina se la modalità di inserimento è add o remove (true o false).
     */
    private boolean isAdd = true;

    /**
     * Creates new form EditingPage
     */
    public EditingPage() {
        initComponents();
        triangle = new Triangle(new Point(1024 / 3, 768 / 4), 1024 / 4);
        dots = new ArrayList<Point>();
    }

    public void paintComponent(Graphics g) {
        g.setColor(new Color(200, 230, 255));
        g.fillRect(0, 0, width, height);
        g.setColor(new Color(100, 150, 170));
        triangle.paint(g);
        //triangle.setA(new Point(this.width/3, this.height/4));
        triangle.update(new Point(this.width / 3, this.height / 4), width / 4);

        //DISEGNO IL POLIGONO TAGLIATO------------------------------------------
        g.setColor(new Color(200, 230, 255));
        if (fillPoly) {
            g.fillPolygon(cutPoly);
        } else {
            g.drawPolygon(cutPoly);
        }
        //----------------------------------------------------------------------
        //DISEGNO I PUNTI DI TAGLIO---------------------------------------------
        if (drawDots) {
            g.setColor(Color.RED);
        } else {
            g.setColor(new Color(0, 0, 0, 0));
        }

        for (Point dot : dots) {
            g.fillOval(dot.x - RADIUS, dot.y - RADIUS, RADIUS * 2, RADIUS * 2);
        }
        //----------------------------------------------------------------------
        System.out.println(this.getWidth() + "  " + this.getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 768, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (isAdd) {
            dots.add(evt.getPoint());
        } else {
            for (Point dot : dots) {
                if (evt.getX() > dot.x - RADIUS
                        && evt.getX() < dot.getX() + RADIUS * 2
                        && evt.getY() > dot.y - RADIUS
                        && evt.getY() < dot.getY() + RADIUS * 2) {
                    dots.remove(dot);
                    break;
                }
            }
        }
        drawDots = true;
        fillPoly = false;
        if (dots.size() >= 2) {
            int[] xPoints = new int[dots.size()];
            int[] yPoints = new int[dots.size()];
            for (int i = 0; i < dots.size(); i++) {
                xPoints[i] = dots.get(i).x;
                yPoints[i] = dots.get(i).y;
            }
            cutPoly = new Polygon(xPoints, yPoints, dots.size());
        }
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        for (Point dot : dots) {
            if (evt.getX() > dot.x - RADIUS
                    && evt.getX() < dot.getX() + RADIUS * 2
                    && evt.getY() > dot.y - RADIUS
                    && evt.getY() < dot.getY() + RADIUS * 2) {
                dot.move(evt.getX(), evt.getY());
                break;
            }
        }
        if (dots.size() >= 2) {
            int[] xPoints = new int[dots.size()];
            int[] yPoints = new int[dots.size()];
            for (int i = 0; i < dots.size(); i++) {
                xPoints[i] = dots.get(i).x;
                yPoints[i] = dots.get(i).y;
            }
            cutPoly = new Polygon(xPoints, yPoints, dots.size());
        }
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    public void isAdd(boolean b) {
        if (b) {
            this.isAdd = true;
        } else {
            this.isAdd = false;
        }
    }

    public void saveDots() {
        StringBuilder data = new StringBuilder();
        for (int i = 0; i < dots.size(); i++) {
            data.append(dots.get(i).x + ", " + dots.get(i).y + "\n");
        }
        if (currentFile != null) {
            try {
                currentFile.createNewFile();
                Files.write(currentFile.toPath(), data.toString().getBytes());
            } catch (IOException ex) {
                System.out.println("Errore di scrittura del File");
            }
        }
        loadDots();
    }

    public void loadDots() {
        if (currentFile != null) {
            ArrayList csvDots = new ArrayList<>();
            try {
                csvDots = (ArrayList) Files.readAllLines(currentFile.toPath());
            } catch (IOException ex) {
                System.out.println("Errore di lettura del File");
            }
            String[] data = {"", ""};
            dots = new ArrayList<Point>();
            for (Object dot : csvDots) {
                System.out.println("dot: " + dot);
                data = dot.toString().split(", ");
                dots.add(new Point(Integer.parseInt(data[0]), Integer.parseInt(data[1])));
            }
            for (int i = 0; i < data.length; i++) {
                System.out.println("data" + data[i]);
            }
            if (dots.size() >= 2) {
                int[] xPoints = new int[dots.size()];
                int[] yPoints = new int[dots.size()];
                for (int i = 0; i < dots.size(); i++) {
                    xPoints[i] = dots.get(i).x;
                    yPoints[i] = dots.get(i).y;
                }
                cutPoly = new Polygon(xPoints, yPoints, dots.size());
            }
        }
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
