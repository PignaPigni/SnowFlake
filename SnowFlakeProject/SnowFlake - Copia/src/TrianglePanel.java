
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.geom.Area;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * @author Nicho
 */
public class TrianglePanel extends javax.swing.JPanel {

    /**
     * Determina se bisogna generare o meno il poligono.
     */
    public boolean fillPoly = false;

    /**
     * Determina se bisogna disegnare o meno i punti di taglio.
     */
    public boolean drawDots = true;

    /**
     * Determina se la modalità di inserimento è add o remove (true o false).
     */
    public boolean isAdd = true;

    /**
     * Determina se la modalità di inserimento è add o remove (true o false).
     */
    public boolean isDrag = false;

    /**
     * Determina se la modalità di inserimento è add o remove (true o false).
     */
    public boolean isCurved = false;

    /**
     * Il modello del triangolo.
     */
    private TriangleModel triangleModel = new TriangleModel();

    /**
     * Il triangolo da ritagliare.
     */
    public Polygon triangle;

    /**
     * Il poligono di taglio.
     */
    public Polygon cutPoly = new Polygon();

    /**
     * Lista dei punti di taglio.
     */
    private ArrayList<Point> dots = new ArrayList<Point>();

    /**
     * Il file corrente del salvataggio dei punti.
     */
    public File currentFile = null;
    private Area finalArea = new Area();

    /**
     * Creates new form TrianglePanel
     */
    public TrianglePanel() {
        initComponents();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        triangleModel.calculateTriangleByPanelSize(this.getWidth(), this.getHeight());
        triangle = triangleModel.getTriangle();
        dots = triangleModel.getDots(this.getWidth(), this.getHeight());
        this.refreshPoly();
        g.setColor(Color.CYAN);
        g.fillPolygon(triangle);
        if (fillPoly) {
            g.setColor(Color.GREEN);
            g.fillPolygon(cutPoly);
        } else {
            g.setColor(Color.BLACK);
            g.drawPolygon(cutPoly);
        }
        if (drawDots) {
            g.setColor(Color.RED);
            for (Point dot : dots) {
                g.fillOval(dot.x - triangleModel.RADIUS, dot.y - triangleModel.RADIUS, triangleModel.RADIUS * 2, triangleModel.RADIUS * 2);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (isAdd && !isDrag) {
            this.triangleModel.addDotToModel(new Point(
                    (int) evt.getPoint().getX(),
                    (int) evt.getPoint().getY()),
                    this.getWidth(), this.getHeight()
            );
        } else if (!isDrag) {
            
            int i = 0;
            for (Point dot : dots) {
                if (evt.getX() > dot.x - triangleModel.RADIUS
                        && evt.getX() < dot.getX() + triangleModel.RADIUS
                        && evt.getY() > dot.y - triangleModel.RADIUS
                        && evt.getY() < dot.getY() + triangleModel.RADIUS) {
                    this.triangleModel.removeDotToModel(i, this.getWidth(), this.getHeight());
                    break;
                }
                i++;
            }
        }
        
        this.dots = triangleModel.getDots(this.getWidth(), this.getHeight());
        int[] xPoints = new int[dots.size()];
        int[] yPoints = new int[dots.size()];
        
        for (int i = 0; i < dots.size(); i++) {
            xPoints[i] = dots.get(i).x;
            yPoints[i] = dots.get(i).y;
        }
        cutPoly = new Polygon(xPoints, yPoints, dots.size());
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (isDrag) {
            int i = 0;
            for (Point dot : dots) {
                if (evt.getX() > dot.x - triangleModel.RADIUS * 2
                        && evt.getX() < dot.getX() + triangleModel.RADIUS * 2
                        && evt.getY() > dot.y - triangleModel.RADIUS * 2
                        && evt.getY() < dot.getY() + triangleModel.RADIUS * 2) {
                    if (isCurved) {
                        this.triangleModel.moveModelDot(i, new Point(
                                (int) evt.getPoint().getX(),
                                (int) evt.getPoint().getY()),
                                this.getWidth(), this.getHeight(),
                                true
                        );
                    } else {
                        this.triangleModel.moveModelDot(i, new Point(
                                (int) evt.getPoint().getX(),
                                (int) evt.getPoint().getY()),
                                this.getWidth(), this.getHeight(),
                                false
                        );
                    }
                    
                    break;
                }
                i++;
            }
        }
    }//GEN-LAST:event_formMouseDragged
    
    public void refreshPoly() {
        this.dots = triangleModel.getDots(this.getWidth(), this.getHeight());
        int[] xPoints = new int[dots.size()];
        int[] yPoints = new int[dots.size()];
        
        for (int i = 0; i < dots.size(); i++) {
            xPoints[i] = dots.get(i).x;
            yPoints[i] = dots.get(i).y;
        }
        cutPoly = new Polygon(xPoints, yPoints, dots.size());
        repaint();
    }
    
    public void reset() {
        this.triangleModel.reset();
        repaint();
    }
    
    public void undo() {
        this.triangleModel.undo();
        repaint();
    }
    
    public void saveDots() {
        StringBuilder data = new StringBuilder();
        for (int i = 0; i < dots.size(); i++) {
            data.append(dots.get(i).x + ", " + dots.get(i).y + "\n");
        }
        
        if (currentFile != null) {
            try {
                currentFile.createNewFile();
                Files.write(currentFile.toPath(), data.toString().getBytes());
            } catch (IOException ex) {
                System.out.println("Errore di scrittura del File");
            }
        } else {
            JFileChooser fc = new JFileChooser();
            MainFrame mf = new MainFrame();
            int returnVal = fc.showSaveDialog(mf);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                currentFile = fc.getSelectedFile();
                System.out.println("name:\t" + currentFile.getName());
                try {
                    currentFile.createNewFile();
                    Files.write(currentFile.toPath(), data.toString().getBytes());
                } catch (IOException ex) {
                    System.out.println("Errore di scrittura del File");
                }
            } else {
                System.out.println("File doesn't exists.");
                currentFile = null;
            }
        }
    }
    
    public void saveDotsAs() {
        StringBuilder data = new StringBuilder();
        for (int i = 0; i < dots.size(); i++) {
            data.append(dots.get(i).x + ", " + dots.get(i).y + "\n");
        }
        
        JFileChooser fc = new JFileChooser();
        MainFrame mf = new MainFrame();
        int returnVal = fc.showSaveDialog(mf);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            currentFile = fc.getSelectedFile();
            System.out.println("name:\t" + currentFile.getName());
            try {
                currentFile.createNewFile();
                Files.write(currentFile.toPath(), data.toString().getBytes());
            } catch (IOException ex) {
                System.out.println("Errore di scrittura del File");
            }
        } else {
            System.out.println("File doesn't exists.");
            currentFile = null;
        }
    }
    
    public void openDots() {
        //JFileChooser
        JFileChooser fc = new JFileChooser();
        MainFrame mf = new MainFrame();
        int returnVal = fc.showOpenDialog(mf);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            currentFile = fc.getSelectedFile();
            //System.out.println("name:\t" + currentFile.getName());
        } else {
            System.out.println("File doesn't exists.");
            currentFile = null;
        }
        //-------------------

        //Carico i punti.
        if (currentFile != null) {
            ArrayList csvDots = new ArrayList<>();
            try {
                csvDots = (ArrayList) Files.readAllLines(currentFile.toPath());
            } catch (IOException ex) {
                System.out.println("Errore di lettura del File");
            }
            String[] data = {"", ""};
            this.triangleModel.reset();
            for (Object dot : csvDots) {
                data = dot.toString().split(", ");
                this.triangleModel.addDotToModel(new Point(Integer.parseInt(data[0]), Integer.parseInt(data[1])), this.getWidth(), this.getHeight());
            }
        }
        repaint();
    }
    
    public String getCurrentFileName() {
        if (currentFile != null) {
            return this.currentFile.getName();
        }
        return null;
    }

    /**
     * Metodo che genera il fiocco di neve.
     *
     * @return Area l'area di taglio.
     */
    public Area generate() {
        TriangleModel tm = this.triangleModel;
        tm.calculateTriangleByPanelSize(this.getWidth() / 2, this.getHeight() / 2);
        Polygon t = tm.triangle;
        
        ArrayList<Point> punti = new ArrayList<>();
        punti = tm.getDots(this.getWidth()/ 2, this.getHeight()/ 2);
        int[] xPoints = new int[punti.size()];
        int[] yPoints = new int[punti.size()];
        for (int i = 0; i < punti.size(); i++) {
            xPoints[i] = punti.get(i).x;
            yPoints[i] = punti.get(i).y;
        }
        Polygon p = new Polygon(xPoints, yPoints, punti.size());
        
        Area triangleArea = new Area(t);
        Area cutPolyArea = new Area(p);
        triangleArea.subtract(new Area(cutPolyArea));
        finalArea = triangleArea;
        return finalArea;
    }
    
    public TriangleModel getTriangleModel() {
        return this.triangleModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
