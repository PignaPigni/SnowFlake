
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author nicho
 */
public class TrianglePanel extends javax.swing.JPanel {

    /**
     * Determina se bisogna generare o meno il poligono.
     */
    public boolean fillPoly = false;

    /**
     * Determina se bisogna disegnare o meno i punti di taglio.
     */
    public boolean drawDots = true;

    /**
     * Determina se la modalità di inserimento è add o remove (true o false).
     */
    public boolean isAdd = true;

    /**
     * Il modello del triangolo.
     */
    private TriangleModel triangleModel = new TriangleModel();

    /**
     * Il triangolo da ritagliare.
     */
    public Polygon triangle;

    /**
     * Il poligono di taglio.
     */
    public Polygon cutPoly = new Polygon();

    /**
     * Lista dei punti di taglio.
     */
    private ArrayList<Point> dots = new ArrayList<Point>();

    /**
     * Creates new form TrianglePanel
     */
    public TrianglePanel() {
        initComponents();
        //this.setSize(1000, 1000);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        triangleModel.calculateTriangleByPanelSize(this.getWidth(), this.getHeight());
        triangle = triangleModel.getTriangle();
        dots = triangleModel.getDots(this.getWidth(), this.getHeight());
        g.setColor(Color.CYAN);
        g.fillPolygon(triangle);

        if (drawDots) {
            g.setColor(Color.RED);
            for (Point dot : dots) {
                g.fillOval(dot.x, dot.y, triangleModel.RADIUS * 2, triangleModel.RADIUS * 2);
            }
        }
        if (fillPoly) {
            g.setColor(Color.WHITE);
            g.fillPolygon(cutPoly);
        } else {
            g.setColor(Color.BLACK);
            g.fillPolygon(cutPoly);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        this.triangleModel.addDotToModel(new Point(
                (int)evt.getPoint().getX()-triangleModel.RADIUS, 
                (int)evt.getPoint().getY()-triangleModel.RADIUS), 
                this.getWidth(), this.getHeight()
        );
        this.dots = triangleModel.getDots(this.getWidth(), this.getHeight());
        int[] xPoints = new int[dots.size()];
        int[] yPoints = new int[dots.size()];

        for (int i = 0; i < dots.size(); i++) {
            xPoints[i] = dots.get(i).x;
            yPoints[i] = dots.get(i).y;
        }
        cutPoly = new Polygon(xPoints, yPoints, dots.size());
        repaint();
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
